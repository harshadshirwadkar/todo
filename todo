#!/usr/bin/python
## todo - CLI based todo manager
## 
## Supported commands:
## todo
## todo add
## todo list
## todo src
##


import sys
import os
from subprocess import call

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'

class todo_offset:
    LEVEL=0
    STATUS=1
    PRIO=2
    NAME=3
    DESC=4
    DEADLINE=5
    
def print_todo(todo):
    if todo[todo_offset.STATUS] == "TODO":
        sys.stdout.write(" " + bcolors.FAIL +"( TODO ) " + todo[todo_offset.PRIO] +
                         " " + bcolors.ENDC+ todo[todo_offset.NAME])
        if len(todo[todo_offset.DESC].lstrip().rstrip()) > 0:
            sys.stdout.write(" (" + todo[todo_offset.DESC].lstrip().rstrip() + ")")
        if len(todo[todo_offset.DEADLINE].lstrip().rstrip()) > 0:
            sys.stdout.write(bcolors.OKBLUE + " :" + 
                             todo[todo_offset.DEADLINE].lstrip().rstrip() +
                             ":" + bcolors.ENDC)
    elif todo[todo_offset.STATUS] == "DONE":
        sys.stdout.write(" " + bcolors.OKGREEN + "( DONE ) " + bcolors.ENDC +  todo[todo_offset.NAME])
        if len(todo[5].lstrip().rstrip()) > 0:
            sys.stdout.write(" (" + todo[todo_offset.DESC].lstrip().rstrip() + ")")
    print ""

def get_todo(f):
    ## a todo is typically of this format:
    ## * [#A] TODO name_of_todo
    ##     deadline: deadline
    ##     description_of_todo
    start = 0
    todo = [None] * 6
    
    level=""
    status=""
    priority=""
    name=""
    deadline=""
    description=""

    while 1:
        line = f.readline()

        if line.startswith("*"):
            if start == 0:
                start = 1
            else:
                f.seek(last_line, 0)
                break
        last_line = f.tell()
        words = line.split()


        if line.startswith("*") :
            level = words[0].count("*")

        looking_for = ""
        for i in range(len(words)):

            if line.startswith("*"):
                ##
                ## Special handling for first line
                ## 
                if words[i] == "[#A]" or words[i] == "[#B]" or words[i] == "[#C]":
                    priority = words[i]
                    continue
                if (words[i] == "TODO" or words[i] == "DONE"):
                    status = words[i]
                    continue
                if (len(words[i]) == words[i].count("*")):
                    continue
            

            if words[i] == ":deadline:":
                looking_for = "deadline"
                continue

            if looking_for == "deadline":
                deadline = deadline + " " + words[i]
                continue

            if line.startswith("*"):
                name = name + " " + words[i]
            else:
                description = description + " " + words[i]
    
        if f.tell() == os.fstat(f.fileno()).st_size:
            break

            todo
    todo[todo_offset.LEVEL] = str(level).lstrip().rstrip()
    todo[todo_offset.STATUS] = status.lstrip().rstrip()
    todo[todo_offset.PRIO] = priority.lstrip().rstrip()
    todo[todo_offset.NAME] = name.lstrip().rstrip()
    todo[todo_offset.DESC] = description.lstrip().rstrip()
    todo[todo_offset.DEADLINE] = deadline.lstrip().rstrip()

    return todo

## List todos
def todo_list():
    f = open(source_file, 'rw+')
    
    todos = []

    todo = grep_get_todo(f)
    while len(str(' '.join(todo)).lstrip().rstrip()) > 0:
        todos.append(todo)
        todo = grep_get_todo(f)
    f.close()

    todos.sort(key = lambda todo: todo[todo_offset.PRIO])
    todos.sort(key = lambda todo: todo[todo_offset.STATUS], reverse = True)

    for i in range(len(todos)):
        print_todo(todos[i])

## Grep
def grep_get_todo(f):
    global options

    if len(options[args.GREP]) > 0:
        search = options[args.GREP]
    else:
        search = ""

    todo = get_todo(f)
    while len(str(' '.join(todo)).lstrip().rstrip()) > 0:
        if search.lstrip().rstrip().lower() in str(' '.join(todo)).lower():
            return todo
        todo = get_todo(f)

    return []

def write_todo(f, todo):
    for i in range(int(todo[todo_offset.LEVEL])):
        f.write("*")

    f.write(" " + todo[todo_offset.PRIO] + " " + todo[todo_offset.STATUS] +
            " " + todo[todo_offset.NAME] + "\n")
    f.write("\t:deadline: " + todo[todo_offset.DEADLINE] + "\n")
    f.write("\t" + todo[todo_offset.DESC] + "\n")

## Add a todo
def todo_add():
    f = open(source_file, 'a')
    what= str(raw_input("What? : "))
    extra=str(raw_input("Description: "))
    when=str(raw_input("When?: "))
    priority=str(raw_input("Priority ([A]/B/C)?: "))
    if priority == "":
        priority = "A"

    todo = [None] * 6

    todo[todo_offset.LEVEL] = "1"
    todo[todo_offset.STATUS] = "TODO"
    todo[todo_offset.PRIO] = "[#" + priority.upper() + "]"
    todo[todo_offset.NAME] = what
    todo[todo_offset.DESC] = extra
    todo[todo_offset.DEADLINE] = when

    write_todo(f, todo)

    f.close()

## Set / Change source
def todo_src():
    if len(sys.argv) < 3:
        dst = os.getcwd() + "/" + local_source
        open(dst,'a').close
        print "todo source: " + os.getcwd()
    else:
        dst = sys.argv[2]

    if os.path.isfile(dst):
        pass
    elif os.path.isfile(os.getcwd() + dst):
        dst = os.getcwd() + dst
    else:
        print "File " + dst + " does not exist."
        exit

    if os.path.isfile(source_file):
        os.remove(source_file)
    os.symlink(dst, source_file)

def todo_mark():
    i = 0
    todos = []

    f = open(source_file, 'rw+')

    todo = get_todo(f)
    while len(str(' '.join(todo)).lstrip().rstrip()) > 0:
        todos.append(todo)
        i = i + 1
        todo = get_todo(f)
        
    j = 0
    todo_indices = []
    k = 1
    todo_indices.append(0)
    while j < i:
        if todos[j][todo_offset.STATUS] == "TODO":
            sys.stdout.write(str(k) + ". ")
            print_todo(todos[j])
            todo_indices.append(j)
            k = k + 1
        j = j + 1

    if k == 1:
        print "Everything is DONE. Good work!"
        exit()

    x = raw_input("Which is done? ")
    todos[int(todo_indices[int(x)])][1] = "DONE"
    f.seek(0)
    f.truncate()
    j = 0
    while j < i:
        write_todo(f, todos[j])
        j = j + 1
    
    print "Marked DONE."
    f.close()

## Interactive mode
def todo_interactive():
    call(["emacsclient", "-nw", source_file])

def usage():
    print "Usage: " + sys.argv[0] + " <action> <args>"

def todo_parse_args():
    global options

    options [args.LIST] = ""
    options [args.GREP] = ""
    options [args.ADD] = ""
    options [args.SRC] = ""

    current = ""
    action = ""

    if len(sys.argv) == 1:
        return "interactive"

    try:
        for i in range(len(sys.argv)):
            str = sys.argv[i]

            if str == "list":
                current = "list"
                if action != "" and action != "list":
                    raise
                action = "list"
                continue

            if str == "grep":
                current = "grep"
                continue
                        
            if str == "src":
                current = "src"
                if action != "":
                    raise
                action = "src"
                continue
        
            if str == "add":
                current = "add"
                if action != "":
                    raise
                action = "add"
                continue

            if str == "mark":
                current = "mark"
                if action != "":
                    raise
                action = "mark"
                continue

            if current == "add":
                options [args.ADD] += " " + str
            if current == "list":
                options [args.LIST] += " " + str
            if current == "src":
                options [args.SRC] += " " + str
            if current == "grep":
                options [args.GREP] += " " + str
            if current == "mark":
                options [args.MARK] += " " + str
        
    except:
        print "Multiple actions not allowed"
        exit()


    return action

#################
## def main(): ##
#################
class args:
    LIST=0
    GREP=1
    ADD=2
    SRC=3
    MARK=4


source_file = "/tmp/.todo-this.org"
local_source = ".todo.org"

options=[None]*5
action = todo_parse_args()

if action == "interactive":
    todo_interactive()
elif action == "add":
    todo_add()
elif action == "list":
    todo_list();
elif action == "grep":
    todo_list()
elif action == "src":
    todo_src()
elif action == "mark":
    todo_mark()
else :
    usage()


